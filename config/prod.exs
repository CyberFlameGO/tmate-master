use Mix.Config

# You should also configure the url host to something
# meaningful, we use this information when generating URLs.
#
# Finally, we also include the path to a manifest
# containing the digested version of static files. This
# manifest is generated by the mix phoenix.digest task
# which you typically run after static files are built.

config :tmate, Tmate.Endpoint,
  http: [port: System.get_env("MASTER_HTTP_PORT", "4000") |> String.to_integer(),
         compress: true, protocol_options: [
           proxy_header: System.get_env("USE_PROXY_PROTOCOL") == "1"]],
  url: System.get_env("MASTER_BASE_URL", "") |> URI.parse() |> Map.to_list(),
  secret_key_base: System.get_env("SECRET_KEY_BASE"),
  cache_static_manifest: "priv/static/cache_manifest.json"
# XXX If SSL options are needed. See tmate-websocket for example
config :phoenix, :serve_endpoints, true

config :tmate, Tmate.Monitoring.Endpoint,
  port: System.get_env("MASTER_METRICS_PORT", "9100") |> String.to_integer()

config :tmate, :master,
  wsapi_key: System.get_env("MASTER_WSAPI_KEY")

# Do not print debug messages in production
config :logger, level: :info

pg = URI.parse(System.get_env("PG_URI", "pg://user:pass@host:5432/db"))
config :tmate, Tmate.Repo,
  adapter: Ecto.Adapters.Postgres,
  timeout: 60000,
  username: pg.userinfo |> String.split(":") |> Enum.at(0),
  password: pg.userinfo |> String.split(":") |> Enum.at(1),
  database: pg.path |> String.split("/") |> Enum.at(1),
  port: pg.port,
  hostname: pg.host,
  pool_size: System.get_env("PG_POOLSIZE", "20") |> String.to_integer(),
  ssl: System.get_env("PG_SSL_CA_CERT") != nil,
  ssl_opts: [cacertfile: System.get_env("PG_SSL_CA_CERT")]

config :tzdata, :autoupdate, :disabled

machine_index = System.get_env("HOSTNAME", "master-0")
                  |> String.split("-") |> Enum.at(-1) |> String.to_integer()

config :tmate, Tmate.Scheduler,
  enabled: machine_index == 0,
  jobs: [
    # every minute
    {"*/1 * * * *", {Tmate.SessionCleaner, :check_for_disconnected_sessions, []}},
    {"*/1 * * * *", {Tmate.SessionCleaner, :prune_sessions, []}},
  ]
